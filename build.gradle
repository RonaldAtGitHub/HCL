plugins {
  id 'base'
  id 'java-library'
  id 'idea'

  id 'org.standardout.bnd-platform' version '1.7.0'

  //noinspection GradlePackageUpdate C2CAC-10070
  id 'com.diffplug.osgi.bndmanifest' version '3.43.0' apply false

  //auditcase plugin to make our own gradle tasks available
  id 'nl.c2c.ac.devops.auditcase'

  //https://github.com/ljacomet/logging-capabilities211
  id "dev.jacomet.logging-capabilities" version "0.11.1"

}

/**
 * Apply the tasks for building the fatjar
 */
apply from: file("${rootDir}/fatjar.gradle").absolutePath

/**
 * configure the properties, plugins, dependencies and compile options for the subprojects
 */
allprojects {
  apply plugin: 'base'
  apply plugin: 'java-library' // Do not use the normal java plugin C2CAC-9675
  apply plugin: 'idea'
  apply plugin: 'org.standardout.bnd-platform' // Enable osgiBndManifest
  apply plugin: 'com.diffplug.osgi.bndmanifest'
  apply plugin: 'dev.jacomet.logging-capabilities'

  platform {
    // Get system environment variables
    def env = System.getenv()
    // Get env name called 'ECLIPSE_HOME'
    def eclipseHomeEnv = env['ECLIPSE_HOME']

    // Check if env is not null otherwise set default value
    if (eclipseHomeEnv != null) {
      eclipseHome = new File(eclipseHomeEnv)
    } else {
      // Set default eclipseHome to internal eclipse configuration
      if (!rootDir.toString().contains('%2F')) {
        eclipseHome = new File("${rootDir}/resources/eclipse/eclipseHome/eclipse")
      } else {
        println "ERROR: ECLIPSE_HOME is not set and path cannot contain '%2F' due to a bug in gradle. Please set ECLIPSE_HOME environment variable to the eclipse installation directory."
      }
    }
  }

  // apply dependencies
  repositories {
    mavenCentral()
  }

  dependencies {

    //logging
    //noinspection GradlePackageUpdate C2CAC-10584
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.20.0'

    // include for compile only, so it won't be bundled
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ibm")
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ndext")
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/osgi")
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/xsp")

    // google guice dependency injection
    implementation 'com.google.inject:guice:5.1.0'
    implementation 'com.google.inject.extensions:guice-assistedinject:5.1.0'

    compileOnly 'org.projectlombok:lombok:1.18.30'

    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    //google
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'com.google.re2j:re2j:1.7'

    //jackson
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.15.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.15.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-paranamer:2.15.3'

    //jersey https://mvnrepository.com/artifact/org.glassfish.jersey.core
    implementation 'org.glassfish.jersey.core:jersey-common:3.1.5'
    implementation 'org.glassfish.jersey.core:jersey-server:3.1.5'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.1.5'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.5'
    implementation 'org.glassfish.jersey.ext:jersey-bean-validation:3.1.5'
    implementation 'org.glassfish.jersey.media:jersey-media-sse:3.1.5'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:3.1.5'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.1.5'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.1.5'
    implementation 'org.glassfish.jersey.core:jersey-client:3.1.5'
    implementation 'org.glassfish.hk2:guice-bridge:3.1.0'

    //java 17 support
    //implementation 'jakarta.activation:jakarta.activation-api:2.1.2'
    //implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    //jakarta.transaction:jakarta.transaction-api:2.0.0
    //implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1' provided by ndext
    //implementation 'com.sun.xml.bind:jaxb-impl:4.0.4' provided by ndext
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:2.3.2'
    implementation 'com.sun.xml.ws:jaxws-rt:2.3.2'
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    //misc
    implementation 'org.jsoup:jsoup:1.16.2'
    implementation 'org.json:json:20230618'
    implementation 'org.modelmapper:modelmapper:3.2.0'

    // apply test dependencies
    // All tests modules should have access to ac and ac/test classpath
    testImplementation project(':nl.c2c.ac')

    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ibm")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ndext")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/osgi")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/xsp")

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // this will add the shared test fixtures of "nl.c2c.ac" to the compile classpath to all the test source-folders.
    testImplementation(testFixtures(project(':nl.c2c.ac')))

    testImplementation 'com.google.guava:guava-testlib:32.1.3-jre'
    testImplementation 'org.projectlombok:lombok:1.18.30'
    testImplementation 'com.google.auto:auto-common:1.2.2'
    testImplementation 'org.mapstruct:mapstruct:1.5.5.Final'
    testImplementation 'org.assertj:assertj-core:3.24.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
  }

  loggingCapabilities {
    enforceLogback()
  }

  if (project.name != "AuditCase") {
    osgiBndManifest {
      copyTo 'META-INF/MANIFEST.MF'
    }
  }

  if (!project.hasProperty("dominopath")) {
    ext.dominopath = "C:\\PROGRA~1\\HCL\\Domino"
  }

  // custom options when we are compiling to Java
  tasks.withType(JavaCompile).configureEach {
    it.options.incremental = true

    it.sourceCompatibility = JavaVersion.VERSION_17
    it.targetCompatibility = JavaVersion.VERSION_17

    it.options.encoding = 'UTF-8'
    it.options.compilerArgs << '-XDignore.symbol.file'  //ignore symbol file warnings from javac
    it.options.compilerArgs << '-Amapstruct.unmappedTargetPolicy=IGNORE' // ignore warnings about unmapped properties for MapStruct.

    it.dependsOn(":copyToLib")
    it.mustRunAfter clean // we want to clean the old code not the newly compiled code
  }
  // we don't want the clean to be ran after a jar has been build
  tasks.withType(Jar).configureEach {
    it.mustRunAfter(clean)// when running a buildAuditCase we have to set a proper timestamp first. So we run the acManifestQualifier.
  }


}

def updateSiteJobs = [':nl.c2c.ac.bootstrap:makeUpdateSitezip', ':nl.c2c.ac.bootstrap:updateSite']
acCopyDomino.mustRunAfter(updateSiteJobs)
acCopyDomino.dependsOn(updateSiteJobs)
