plugins {
  id 'base'
  id 'java-library'
  id 'idea'

  id 'org.standardout.bnd-platform' version '1.7.0'

  //noinspection GradlePackageUpdate C2CAC-10070
  id 'com.diffplug.osgi.bndmanifest' version '3.43.0' apply false

  //auditcase plugin to make our own gradle tasks available
  id 'nl.c2c.ac.devops.auditcase'

  //https://github.com/ljacomet/logging-capabilities211
  id "dev.jacomet.logging-capabilities" version "0.11.1"

}

/**
 * Apply the tasks for building the fatjar
 */
apply from: file("${rootDir}/fatjar.gradle").absolutePath

/**
 * configure the properties, plugins, dependencies and compile options for the subprojects
 */
allprojects {
  apply plugin: 'base'
  apply plugin: 'java-library' // Do not use the normal java plugin C2CAC-9675
  apply plugin: 'idea'
  apply plugin: 'org.standardout.bnd-platform' // Enable osgiBndManifest
  apply plugin: 'com.diffplug.osgi.bndmanifest'
  apply plugin: 'dev.jacomet.logging-capabilities'

  platform {
    // Get system environment variables
    def env = System.getenv()
    // Get env name called 'ECLIPSE_HOME'
    def eclipseHomeEnv = env['ECLIPSE_HOME']

    // Check if env is not null otherwise set default value
    if (eclipseHomeEnv != null) {
      eclipseHome = new File(eclipseHomeEnv)
    } else {
      // Set default eclipseHome to internal eclipse configuration
      if (!rootDir.toString().contains('%2F')) {
        eclipseHome = new File("${rootDir}/resources/eclipse/eclipseHome/eclipse")
      } else {
        println "ERROR: ECLIPSE_HOME is not set and path cannot contain '%2F' due to a bug in gradle. Please set ECLIPSE_HOME environment variable to the eclipse installation directory."
      }
    }
  }

  // apply dependencies
  repositories {
    mavenCentral()
  }

  dependencies {
    constraints {
      implementation("org.apache.logging.log4j:log4j-core") {
        version {
          strictly("[2.17, 3[")
          prefer("2.17.0")
        }

        because("CVE-2021-44228: Log4j vulnerable to remote code execution")
      }
    }

    //logging
    //noinspection GradlePackageUpdate C2CAC-10584
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.20.0'

    // include for compile only, so it won't be bundled
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ibm")
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ndext")
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/osgi")
    compileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/xsp")

    // google guice dependency injection
    implementation 'com.google.inject:guice:5.1.0'
    implementation 'com.google.inject.extensions:guice-assistedinject:5.1.0'

    compileOnly 'org.projectlombok:lombok:1.18.30'

    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    implementation 'com.google.auto:auto-common:1.2.2'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    //google
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'com.google.http-client:google-http-client:1.43.3'
    implementation 'com.google.re2j:re2j:1.7'

    //caffeine as a replacement for guava's caching
    //noinspection GradlePackageUpdate : for Java 11 or above, use 3.x otherwise use 2.x.
    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3'

    // for generateComputedObjects code
    implementation 'com.squareup:javapoet:1.13.0'

    //jackson
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.15.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.15.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-paranamer:2.15.3'

    //quartz
    implementation 'org.quartz-scheduler:quartz:2.3.2'
    implementation 'org.quartz-scheduler:quartz-jobs:2.3.2'

    //json web token
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.67'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.37'

    //apache poi
    implementation 'org.apache.poi:poi:5.2.4'
    implementation 'org.apache.poi:poi-ooxml:5.2.4'
    implementation 'org.apache.poi:poi-scratchpad:5.2.4'
    implementation 'org.apache.poi:poi-excelant:5.2.4'
    implementation 'org.apache.xmlbeans:xmlbeans:4.0.0'

    //apache tools
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.apache.commons:commons-configuration2:2.9.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    // mustache, used to replace {{}} smart values
    implementation 'com.github.spullara.mustache.java:compiler:0.9.11'

    //reflection (ronmamo)
    implementation 'org.javassist:javassist:3.29.2-GA'
    implementation 'org.reflections:reflections:0.10.2'

    //sendgrid
    implementation 'com.sendgrid:sendgrid-java:4.10.1'

    //domino jnx
    implementation 'com.hcl.domino:domino-jnx-jna:1.31.0'
    implementation 'com.hcl.domino:domino-jnx-api:1.31.0'
    implementation 'com.hcl.domino:domino-jnx-commons:1.31.0'
    implementation 'com.hcl.domino:domino-jnx:1.31.0'
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.4'
    implementation 'com.sun.activation:jakarta.activation:2.0.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    //Problem
    implementation 'org.zalando:problem:0.27.1'
    implementation 'org.zalando:jackson-datatype-problem:0.27.1'

    //jersey
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.core:jersey-common:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.core:jersey-server:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.ext:jersey-bean-validation:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.media:jersey-media-sse:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.33'
    //noinspection GradlePackageUpdate C2CAC-6049
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.33'

    //noinspection GradlePackageUpdate Note the <version> should match the HK2 version pulled in by your Jersey version. https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-server
    implementation 'org.glassfish.hk2:guice-bridge:2.6.1'

    //jersey-client
    //noinspection GradlePackageUpdate it shared files with the server so keep it in line with jersey server dependencies
    implementation 'org.glassfish.jersey.core:jersey-client:2.33'

    //upload to s3 bucket
    implementation 'software.amazon.awssdk:s3:2.21.29'
    implementation 'software.amazon.awssdk:s3:2.21.29'
    implementation 'software.amazon.awssdk.crt:aws-crt:0.25.0'
    implementation 'software.amazon.awssdk:s3-transfer-manager:2.21.29'

    //used in generating LTPA token, using LMBCS character set
    implementation 'com.ibm.icu:icu4j-charset:73.2'

    //java 17 support
    //implementation 'jakarta.activation:jakarta.activation-api:2.1.2'
    //implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    //jakarta.transaction:jakarta.transaction-api:2.0.0
    //implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1' provided by ndext
    //implementation 'com.sun.xml.bind:jaxb-impl:4.0.4' provided by ndext
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:2.3.2'
    implementation 'com.sun.xml.ws:jaxws-rt:2.3.2'

    //misc
    implementation 'org.jsoup:jsoup:1.16.2'
    implementation 'org.json:json:20230618'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'com.ibm.icu:icu4j:73.2'//needed for jasypt
    implementation 'org.apache.httpcomponents:httpmime:4.5.14'
    implementation 'org.modelmapper:modelmapper:3.2.0'
    implementation 'com.mescius.documents:dsexcel:7.0.4'

    // Validsign SDK
    //exclude binder for sl4j because we load a NOP binder
    implementation 'com.silanis.esl:sdk:11.54' exclude group: 'org.slf4j' exclude group: 'org.littleshoot'

    // apply test dependencies
    // All tests modules should have access to ac and ac/test classpath
    testImplementation project(':nl.c2c.ac')

    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ibm")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/ndext")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/osgi")
    testCompileOnly fileTree(include: ['**/*.jar'], dir: "${rootDir}/resources/dependency/IntelliJD14/xsp")

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // this will add the shared test fixtures of "nl.c2c.ac" to the compile classpath to all the test source-folders.
    testImplementation(testFixtures(project(':nl.c2c.ac')))

    testImplementation 'com.google.guava:guava-testlib:32.1.3-jre'
    testImplementation 'com.devskiller:jfairy:0.6.5'
    testImplementation 'org.projectlombok:lombok:1.18.30'
    testImplementation 'com.google.auto:auto-common:1.2.2'
    testImplementation 'org.mapstruct:mapstruct:1.5.5.Final'
    testImplementation 'org.assertj:assertj-core:3.24.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
  }

  loggingCapabilities {
    enforceLogback()
  }

  if (project.name != "AuditCase") {
    osgiBndManifest {
      copyTo 'META-INF/MANIFEST.MF'
    }
  }

  if (!project.hasProperty("dominopath")) {
    ext.dominopath = "C:\\PROGRA~1\\HCL\\Domino"
  }

  // custom options when we are compiling to Java
  tasks.withType(JavaCompile).configureEach {
    it.options.incremental = true

    it.sourceCompatibility = JavaVersion.VERSION_1_8
    it.targetCompatibility = JavaVersion.VERSION_1_8

    it.options.encoding = 'UTF-8'
    it.options.compilerArgs << '-XDignore.symbol.file'  //ignore symbol file warnings from javac
    it.options.compilerArgs << '-Amapstruct.unmappedTargetPolicy=IGNORE' // ignore warnings about unmapped properties for MapStruct.

    it.dependsOn(":copyToLib")
    it.mustRunAfter clean // we want to clean the old code not the newly compiled code
  }
  // we don't want the clean to be ran after a jar has been build
  tasks.withType(Jar).configureEach {
    it.mustRunAfter(clean)// when running a buildAuditCase we have to set a proper timestamp first. So we run the acManifestQualifier.
  }

  tasks.withType(Test).configureEach { testTask ->
    // We do not want the test results being cached by Gradle because we currently have a lot of integration-like tests
    outputs.upToDateWhen { false }

    dependsOn(":copyToLib")

    testTask.maxParallelForks Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    // continue running unit tests even after there are test failures in a module.
    // If this is false and there is a failing test in nl.c2c.ac it will stop running and not run tests of following modules or create a test report.
    ignoreFailures = true

    reports {
      junitXml.required = true
      // create a html report for every module
      html.required = true
    }

    testLogging.showStandardStreams = true

    environment "path", "${dominopath}"
    environment "java.library.path", "${dominopath}"
    systemProperty "junit-test-running", "yes"
    systemProperty "AuditCasePlatformModus", "JUNIT"
  }

  tasks.register('externalApiTest', Test) { testTask ->
    description = 'Run all the API tests of external APIs'
    group = 'verification'

    testTask.useJUnitPlatform {
      JUnitPlatformOptions options ->
        options.includeTags += 'EXTERNAL_API_TEST'

        excludeSlowTest(project.rootProject, options)
    }

    testTask.shouldRunAfter(tasks.named('test'))
  }

  tasks.register('dominoTest', Test) { testTask ->
    description = 'Run all the tests annotated with @TestWithDomino. This requires the domino server to be up and running'
    group = 'verification'

    testTask.useJUnitPlatform {
      JUnitPlatformOptions options ->
        options.includeTags += 'DOMINO'

        options.excludeTags += 'EXTERNAL_API_TEST'
        excludeSlowTest(project.rootProject, options)
    }

    testTask.mustRunAfter(tasks.named('test'), tasks.named('externalApiTest'))
  }

  tasks.named("test") { testTask ->
    testTask.useJUnitPlatform {
      JUnitPlatformOptions options ->
        options.includeTags += 'UNIT_TEST'

        options.excludeTags += 'EXTERNAL_API_TEST'
        excludeSlowTest(project.rootProject, options)
    }
  }

  tasks.named("check") { checkTasks ->
    checkTasks.dependsOn externalApiTest

    checkTasks.dependsOn dominoTest
  }

//  jacocoTestReport {
//    sourceSets sourceSets.main
//
//    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
//
//    reports {
//      xml.required = true
//      csv.required = false
//      html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
//    }
//  }

  test {
//    finalizedBy jacocoTestReport // report is always generated after tests run
  }
//  jacocoTestReport {
//    dependsOn test // tests are required to run before generating the report
//    mustRunAfter(":externalApiTest")
//  }
}

private static void excludeSlowTest(Project rootProject, JUnitPlatformOptions options) {
  if (!rootProject.hasProperty('slow')) {
    options.excludeTags += 'SLOW_TEST' // to run the slow tests add -Pslow to the commandline
  }
}

def updateSiteJobs = [':nl.c2c.ac.bootstrap:makeUpdateSitezip', ':nl.c2c.ac.bootstrap:updateSite']
acCopyDomino.mustRunAfter(updateSiteJobs)
acCopyDomino.dependsOn(updateSiteJobs)
